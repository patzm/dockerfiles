services:

  app:
    image: ghcr.io/maybe-finance/maybe:latest
    restart: unless-stopped
    env_file:
      - stack.env
      - .env
    networks:
      - default
      - traefik
    environment:
      DB_HOST: "postgres"
      RAILS_ENV: "production"
      RAILS_FORCE_SSL: false
      RAILS_ASSUME_SSL: false
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maybe.entrypoints=websecure"
      - "traefik.http.routers.maybe.rule=Host(`${APP_DOMAIN}`)"
      - "traefik.http.routers.maybe.tls=true"
      - "traefik.http.routers.maybe.tls.certresolver=patz.app"
      - "traefik.http.routers.maybe.middlewares=ssl-header@file"
      - "traefik.http.routers.maybe.tls.domains[0].main=patz.app"
      - "traefik.http.routers.maybe.tls.domains[0].sans=${APP_DOMAIN}"
      - "traefik.http.services.maybe.loadbalancer.server.port=3000"

  postgres:
    image: postgres:16
    restart: unless-stopped
    env_file:
      - stack.env
      - .env
    volumes:
      - /mnt/ssd-1tb/docker/maybe/postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=false"


networks:
  default:
  traefik:
    name: traefik
    external: true
